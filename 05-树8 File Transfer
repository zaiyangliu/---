#include<stdio.h>
#define MaxSize 10009
typedef int ElementType;
typedef int SetName;
typedef ElementType SetType[MaxSize];
//SetName Find(SetType s, ElementType x){
 // for( ; s[x] >= 0; x = s[x])
  //    ;           //注意这个;要写，什么都不干，属于语法问题。
 // return x;
//}
SetName Find(SetType s, ElementType x){ //路径压缩，只有数据量非常大时，才显示出优越性
  if(s[x] < 0) return x;
  else return s[x] = Find(s, s[x]);
}
void Union(SetType s, SetName root1, SetName root2){ //树低的并入树高的，不然数据会超时
  if(s[root2] < s[root1]){
    s[root2] += s[root1];
    s[root1] = root2;
  }
  else{
    s[root1] += s[root2];
    s[root2] = root1;
  }
}
void Initialization(SetType s, int n){
  int i;
  for(i = 0; i < n; ++i){
    s[i] = -1;
  }
}
void Input_connection(SetType s){
  ElementType u, v;
  SetName root1, root2;
  scanf("%d%d", &u, &v);
  root1 = Find(s, u - 1);
  root2 = Find(s, v - 1);
  if(root1 != root2){
    Union(s, root1, root2);
  }
}

void Check_connection(SetType s){
  ElementType u, v;
  SetName root1, root2;
  scanf("%d%d", &u, &v);
  root1 = Find(s, u - 1);
  root2 = Find(s, v - 1);
  if(root1 == root2) printf("yes\n");
  else printf("no\n");
}

void Check_network(SetType s, int n){
  int i, cnt = 0;
  for( i = 0; i < n; ++i){
    if(s[i] < 0) cnt++;
  }
  if(cnt == 1) printf("The network is connected.\n");
  else printf("There are %d components.\n", cnt);
}

int main(){
  SetType s;
  int n;
  char in;
  scanf("%d", &n);
  Initialization(s, n);
  do{
    scanf("%c", &in);
    switch(in){
      case 'I': Input_connection(s); break;
      case 'C': Check_connection(s); break;
      case 'S': Check_network(s, n); break;
    }
  }while(in != 'S');
  return 0;
  
}
